# 一、表文件/数据行的备份:
👨‍🏫 #面试
表文件备份
```sql
create table 新表 select * from 旧表
```

数据行备份
```sql
insert into 表1  select *  from 表2
```

# 二、⭐索引index（重点）----SQL优化
👨‍🏫 #面试 必考
## 1. 为什么查询语句的执行效率会越来越慢？
逐行扫描，数据条数越来越多，效率越来越慢

## 2. sql优化
通过索引快速为查询命令提供满足条件的数据行，避免查询命令采用【全表扫描】方式来定位数据行

## 3. 什么是索引：
- 索引本质上就是一个数组
- 一个索引存放一个字段的信息和信息在表中的位置
- 索引按照升序存储字段的内容
- 索引为查询命令快速提供满足条件的数据行，避免查询命令采用全表扫描方式来定位数据行

🌰*例子*:
![](00-resource/assets/数据库索引图.png)
假设在age字段上没有索引，查询年龄等于20岁的球员
```sql
select * from student where age = 20;
```
where采用全表扫描，总共扫描5行，才得到满足条件的数据行
在age字段添加索引 ( age_index ) 后重新执行上述sql语句时，age_index快速定位 ( 0 , 2 ) 效率提高。

## 4. 索引基本操作(非重点)
当表中有主键、外键、唯一性约束 mysql会自动创建索引

- 查看表中哪些字段上关联了索引
```sql
show index from emp;
```
- 添加索引
```sql
create index ename_index on emp (ename);
```
- 删除索引
```sql
drop index ename_index on emp;
```

## 5.执行计划
- 命令格式：
```sql
explain 查询语句
```
- 作用：检测查询语句执行过程中效率以及执行中是否得到索引的帮助
```sql
explain select * from emp where sal < 1000;
```
- type 属性：
	慢-------------------------------->快
	**all < index < range < ref < const**  
	[必须背住]  👽
## 6. type属性解释(非重点)
- type = all;
	查询语句执行时，并没有得到索引的帮助
	采用全表扫描方式来得到满足条件的数据行
- type = index;
- 
# 三、存储引擎（非重点）
1. 介绍：MySQL服务器对于文件股那里方案
2. 基本操作：
- 查看数据库服务器支持存储引擎有哪些
```sql
show engines;
```
- 查看表文件以来的存储引擎
```sql
show create table emp;
```
- 修改表文件依赖的存储引擎
```sql
alter table emp engine = innodb;
```
- 设置数据库服务默认存储引擎
my.ini--->*default-storage-engine=默认存储引擎*
3. Innodb & MyIsam
- Innodb：强调数据安全性。要求在对表文件中数据做更改 ( insert / update / delete ) 之前，必须对表文件生成一个备份表，然后才允许对表文件内容进行修改操作
- MyIsam：强调操作速度。首先，不会再进行数据修改时生成备份表，它会将表文件信息分为三个文件存储
	- xxx.frm 字段信息
	- xxx.myd 数据行信息
	- xxx.myi 索引信息

# 四、约束Constraint（非重点）
1. 介绍：约束诗mysql服务器提供的一种管理方案确保字段内容是合理合法的。
2. 分类：
	- 非空约束：约束管理的字段内容不能为null
	- 唯一性约束：约束管理的字段内容不能有重复值。但是可以有多个null
	- 主键约束：修饰主键字段，确定主键字段不能为null也不能为重复的值
	- 外键约束：约束管理多方表的外键字段，外键字段内容必须为对应的一方表主键字段中已经存在的值。允许存在多个null值

# 五、视图view(非重点)
介绍：mysql服务器中一种管理对象。帮助开发人员进行【查询语句复用】以及【表中字段使用权分配】视图对象内部是一个 Map.key 存储的查询语句。value 存储查询语句对应的字段使用权。1
